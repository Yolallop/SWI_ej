üîπ Opci√≥n 1: database.games como un objeto (usa Object.values() para buscar)
En este caso, los juegos est√°n guardados en un objeto, donde las claves son los identificadores (id).

javascript

const database = {
    games: {
        1: { id: 1, name: "Catan", genre: "Estrategia" },
        2: { id: 2, name: "Monopoly", genre: "Finanzas" },
        3: { id: 3, name: "Uno", genre: "Cartas" }
    }
};
üîç C√≥mo buscar un juego por nombre en esta estructura:
javascript

const gameName = "Catan";
const game = Object.values(database.games).find(g => g.name === gameName);

console.log(game);
üìå Salida:

javascript

{ id: 1, name: "Catan", genre: "Estrategia" }
‚úÖ Se necesita Object.values() para convertir el objeto en un array y poder buscar con .find().

üîπ Opci√≥n 2: database.games como un array (NO necesita Object.values())
En este caso, los juegos est√°n guardados en un array, lo cual es m√°s f√°cil para recorrer y buscar.

javascript

const database = {
    games: [
        { id: 1, name: "Catan", genre: "Estrategia" },
        { id: 2, name: "Monopoly", genre: "Finanzas" },
        { id: 3, name: "Uno", genre: "Cartas" }
    ]
};
üîç C√≥mo buscar un juego por nombre en esta estructura:
javascript

const gameName = "Catan";
const game = database.games.find(g => g.name === gameName);

console.log(game);
üìå Salida:

javascript

{ id: 1, name: "Catan", genre: "Estrategia" }
‚úÖ NO necesitas Object.values() porque database.games ya es un array y .find() funciona directamente.







ARRAY

var express = require('express');
var router = express.Router();
const database = require('../database'); // Aseg√∫rate de que este m√≥dulo contiene la lista de juegos

// Ruta GET para buscar juego por nombre
router.get('/:name', (req, res) => {
    const gameName = req.params.name;

    // Buscamos directamente en el array de juegos
    const game = database.games.find(g => g.name === gameName);

    if (!game) {
        return res.status(404).send('Juego no encontrado');
    }

    res.render('gamesDetail', { 
        title: 'Detalles del Juego',
        game: game,
        user: req.session.user
    });
});

module.exports = router;



OBJETO 

var express = require('express');
var router = express.Router();
const database = require('../database'); // Aseg√∫rate de que este m√≥dulo contiene la lista de juegos

// Ruta GET para buscar juego por nombre
router.get('/:name', (req, res) => {
    const gameName = req.params.name;

    // Convertimos el objeto en un array y buscamos por nombre
    const game = Object.values(database.games).find(g => g.name === gameName);

    if (!game) {
        return res.status(404).send('Juego no encontrado');
    }

    res.render('gamesDetail', { 
        title: 'Detalles del Juego',
        game: game,
        user: req.session.user
    });
});

module.exports = router;
----------------------------------------------------------------------------------------------------------------------------------------------

OBJETO  
const game = {
    data: {
        1: { id: 1, name: "Catan", genre: "Estrategia" },
        2: { id: 2, name: "Monopoly", genre: "Finanzas" },
        3: { id: 3, name: "Uno", genre: "Cartas" }
    }

console.log(game.data[1]); // { id: 1, name: "Catan", genre: "Estrategia" }
console.log(game.data[2]); // { id: 2, name: "Monopoly", genre: "Finanzas" }
console.log(game.data[3]); // { id: 3, name: "Uno", genre: "Cartas" }

};
// Definir el nuevo juego
const newGame = { id: 4, name: "Risk", genre: "Estrategia" };

// Agregarlo a game.data con una nueva clave num√©rica
game.data[4] = newGame;

console.log(game.data);
------------------------------------------------------------------------------------------------------------------------------------------------------------
router.post('/add', (req, res) => {
    const { name, genre } = req.body; // Obtenemos el nombre y g√©nero desde la solicitud

    if (!name || !genre) {
        return res.status(400).send('Faltan datos');
    }

    // Obtener un nuevo ID autom√°ticamente (m√°ximo ID actual + 1)
    const newId = Math.max(...Object.keys(game.data).map(Number)) + 1;

    // Crear el nuevo juego
    const newGame = { id: newId, name, genre };

    // Agregarlo a game.data
    game.data[newId] = newGame;

    res.status(201).send({ message: "Juego a√±adido", game: newGame });
});
------------------------------------------------------------------------------------------------------------------------------------------------------------
router.get('/id/:id', (req, res) => {
    const gameId = req.params.id; // Obtenemos el ID de la URL

    // Accedemos directamente a game.data usando el ID
    const game = game.data[gameId];

    if (!game) {
        return res.status(404).send('Juego no encontrado');
    }

    res.render('gamesDetail', { 
        title: 'Detalles del Juego',
        game: game,
        user: req.session.user
    });
});
hohnobiubiib
-------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Ejemplo complejo para practicar errores avanzados en HTML">
    <title>Prueba de Examen</title>
    <link rel="stylesheet" href="styles.css">
    <script src="script.js" defer></script>
</head>

<body>
    <header>
        <h1>Bienvenido a Mi Web</h1>
        <nav>
            <ul>
                <li><a href="index.html">Inicio</a></li>
                <li><a href="contacto.html">Contacto</a></li>
                <li><a href="https://example.com" target="_blank">P√°gina externa</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <article>
            <h2>√öltimas Noticias</h2>
            <p>En este art√≠culo, hablaremos sobre las √∫ltimas <b>actualizaciones <i>en tecnolog√≠a</i></b>.</p>
            <img src="imagen.jpg" alt="Foto de tecnolog√≠a">
        </article>

        <section>
            <h2>Formulario de Registro</h2>
            <form action="procesar_form.php" method="post">
                <label for="nombre">Nombre:</label>
                <input type="text" id="nombre" name="nombre" minlength="3" required>  
                
                <label for="correo">Correo electr√≥nico:</label>
                <input type="email" name="correo" id="correo" required pattern="^[a-zA-Z0-9._%+-]+@gmail\.com$">
                
                <label for="password">Contrase√±a:</label>
                <input type="password" id="password" name="password" required>

                <label for="pais">Pa√≠s:</label>
                <select name="pais" id="pais">
                    <option value="">Selecciona tu pa√≠s</option>
                    <option value="es">Espa√±a</option>
                    <option value="mx">M√©xico</option>
                </select>

                <label for="terminos">
                    <input type="checkbox" id="terminos" name="terminos"> Acepto los t√©rminos y condiciones
                </label>
                <br>
                <input type="submit" value="Registrarse">
            </form>
        </section>

        <section>
            <h2>Lista de Productos</h2>
            <ol>
                <li>Producto 1</li>
                <li>Producto 2</li>
                <li>Producto 3</li>
            </ol>
        </section>

        <section>
            <h2>Tabla de Precios</h2>
            <table>
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Precio</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Computadora</td>
                        <td>$1000</td>
                    </tr>
                    <tr>
                        <td>Tel√©fono</td>
                        <td>$600</td>
                    </tr>
                </tbody>
            </table>
        </section>

        <section>
            <h2>Contenido Multimedia</h2>
            <audio src="audio.mp3" controls autoplay>
                <p>Tu navegador no soporta el elemento de audio.</p>
            </audio>
            <video controls>
                <source src="video.mp4" type="video/mp4">
                <p>Tu navegador no soporta el elemento de video.</p>
            </video>
        </section>
    </main>

    <footer>
        <p>&copy; 2025 Mi Sitio Web</p>
        <p>Contacto: <a href="mailto:info@ejemplo.com">info@ejemplo.com</a></p>
    </footer>
</body>
</html>
-----------------------------------------------------------------------------------------------
CSS
7. Estilos para formularios
css

/* Estilo de los inputs */
input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

/* Cambiar borde al hacer clic */
input:focus {
    border-color: blue;
}

/* Estilos para el bot√≥n de enviar */
input[type="submit"] {
    background-color: green;
    color: white;
    padding: 10px;
    border: none;
    cursor: pointer;
}

/* Bot√≥n al pasar el mouse */
input[type="submit"]:hover {
    background-color: darkgreen;
}
üì¶ 8. Uso de Flexbox


.container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 200px;
}

/* Centrar elementos en flexbox */
.center {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}
üéØ 9. Uso de Grid CSS
css

.grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
}

/* Estilos para los elementos del grid */
.grid-item {
    background-color: lightblue;
    padding: 20px;
    text-align: center;
}


/* Color de texto */
h1 {
    color: red;
}

/* Fondo con color */
body {
    background-color: #f4f4f4;
}

/* Fondo con imagen */
div {
    background-image: url("imagen.jpg");
    background-size: cover;
    background-position: center;
}
/* Margen externo */
.box {
    margin: 20px;
}

/* Espaciado interno */
.box {
    padding: 10px;
}

/* Bordes */
.box {
    border: 2px solid black;
    border-radius: 10px;
}

--------------------------------------------------------BARRAS 
<h1>Barra de Progreso</h1>

<!-- Contenedor de la barra -->
<div id="progress-container">
    <div id="progress-bar"></div>
</div>

<!-- Slider para mover la barra -->
<input type="range" id="progress-slider" min="0" max="100" value="50">

<script>
    const slider = document.getElementById("progress-slider");
    const progressBar = document.getElementById("progress-bar");

    slider.addEventListener("input", function () {
        progressBar.style.width = this.value + "%";
    });
</script>

/* Contenedor de la barra */
#progress-container {
    width: 80%;
    max-width: 500px;
    height: 20px;
    background-color: #e0e0e0;
    border-radius: 10px;
    margin: 20px auto;
    overflow: hidden;
}

/* Barra de progreso */
#progress-bar {
    width: 50%; /* Progreso inicial */
    height: 100%;
    background-color: #28a745;
    transition: width 0.3s ease-in-out;
}

/* Slider */
#progress-slider {
    width: 80%;
    max-width: 500px;
    margin: 20px auto;
    -webkit-appearance: none; /* Quitar estilo predeterminado */
    appearance: none;
    height: 10px;
    background-color: #e0e0e0;
    border-radius: 5px;
    outline: none;
    cursor: pointer;
}

